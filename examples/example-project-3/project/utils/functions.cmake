# This file was generated by Xen ProjGen.
# File: functions.cmake
# Version: 1.0
# Author: XeniaPhe
# License: MIT License
# Github: https://github.com/XeniaPhe/Xen-ProjGen
# Description: Provides the helper CMake functions

function(get_compiler_definition OUT_DEFINITION)
    if (CMAKE_CXX_COMPILER_ID)
        set(COMPILER_ID "${CMAKE_CXX_COMPILER_ID}")
    elseif (CMAKE_C_COMPILER_ID)
        set(COMPILER_ID "${CMAKE_C_COMPILER_ID}")
    else()
        message(FATAL_ERROR "No C or C++ compiler found.")
    endif()

    if ("${COMPILER_ID}" STREQUAL "GNU")
        set(${OUT_DEFINITION} "GCC_COMPILER" PARENT_SCOPE)
    elseif ("${COMPILER_ID}" STREQUAL "Clang")
        if ("${CMAKE_CXX_COMPILER_FRONTEND_VARIANT}" STREQUAL "MSVC")
            set(${OUT_DEFINITION} "CLANG_CL_COMPILER" PARENT_SCOPE)
        else()
            set(${OUT_DEFINITION} "CLANG_COMPILER" PARENT_SCOPE)
        endif()
    elseif ("${COMPILER_ID}" STREQUAL "MSVC")
        set(${OUT_DEFINITION} "MSVC_COMPILER" PARENT_SCOPE)
    else()
        set(${OUT_DEFINITION} "UNKNOWN_COMPILER" PARENT_SCOPE)
    endif()
endfunction()

function (get_compiler_variant COMPILER_DEFINITON OUT_VARIANT)
    if ("${COMPILER_DEFINITON}" STREQUAL "MSVC_COMPILER" OR "${COMPILER_DEFINITON}" STREQUAL "CLANG_CL_COMPILER")
        set(${OUT_VARIANT} "MSVC" PARENT_SCOPE)
    elseif ("${COMPILER_DEFINITON}" STREQUAL "GCC_COMPILER")
        set(${OUT_VARIANT} "GCC" PARENT_SCOPE)
    elseif ("${COMPILER_DEFINITON}" STREQUAL "CLANG_COMPILER")
        set(${OUT_VARIANT} "CLANG" PARENT_SCOPE)
    else()
        set(${OUT_VARIANT} "UNKNOWN" PARENT_SCOPE)
    endif()
endfunction()

function (append_architectural_definitions OUT_DEFINITIONS)
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        list(APPEND ${OUT_DEFINITIONS} "WORD_SIZE_64")
    else()
        list(APPEND ${OUT_DEFINITIONS} "WORD_SIZE_32")
    endif()

    set(${OUT_DEFINITIONS} "${${OUT_DEFINITIONS}}" PARENT_SCOPE)
endfunction()

function (append_os_definitions OUT_DEFINITIONS)
    if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
        list(APPEND ${OUT_DEFINITIONS} "WINDOWS")
    elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
        list(APPEND ${OUT_DEFINITIONS} "LINUX")
        list(APPEND ${OUT_DEFINITIONS} "UNIX")
    elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
        list(APPEND ${OUT_DEFINITIONS} "MACOS")
        list(APPEND ${OUT_DEFINITIONS} "UNIX")
    else()
        list(APPEND ${OUT_DEFINITIONS} "OTHER_OS")
    endif()

    set(${OUT_DEFINITIONS} "${${OUT_DEFINITIONS}}" PARENT_SCOPE)
endfunction()

function (append_build_definitions OUT_DEFINITIONS)
    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        list(APPEND ${OUT_DEFINITIONS} "DEBUG")
    elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
        list(APPEND ${OUT_DEFINITIONS} "RELEASE")
    elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
        list(APPEND ${OUT_DEFINITIONS} "MINSIZEREL")
    elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
        list(APPEND ${OUT_DEFINITIONS} "RELWITHDEBINFO")
    endif()

    set(${OUT_DEFINITIONS} "${${OUT_DEFINITIONS}}" PARENT_SCOPE)
endfunction()

function(read_file FILE_PATH OUT_CONTENTS)
    file(READ "${FILE_PATH}" FILE_CONTENT)
    string(REPLACE "\n" ";" CONTENTS "${FILE_CONTENT}")
    list(REMOVE_ITEM CONTENTS "")
    set(${OUT_CONTENTS} "${CONTENTS}" PARENT_SCOPE)
endfunction()

function (get_compiler_flags COMPILER_VARIANT OUT_FLAGS)
    find_package (Python COMPONENTS Interpreter Development)

    if (NOT PYTHON_FOUND)
        message(FATAL_ERROR "Python not found.")
    endif()

    execute_process(
        COMMAND "${Python_EXECUTABLE}" "${CMAKE_SOURCE_DIR}/project/utils/fetch_flags.py" ${COMPILER_VARIANT} ${CMAKE_BUILD_TYPE}
        OUTPUT_VARIABLE TEMP
        ERROR_VARIABLE ERROR_MSG
        RESULT_VARIABLE RESULT
        WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/project/utils"
    )

    if (NOT RESULT EQUAL 0)
        message(FATAL_ERROR "Error in fetch_flags.py:\n${ERROR_MSG}")
    endif()

    string(STRIP "${TEMP}" TEMP_CLEAN)
    set(${OUT_FLAGS} ${TEMP_CLEAN} PARENT_SCOPE)
endfunction()

function(install_dy_libs TARGET_NAME OUT_DIR DY_LIBS)
    foreach(DY_LIB ${DY_LIBS})
        add_custom_command(TARGET "${TARGET_NAME}" POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different "${DY_LIB}" "${OUT_DIR}")
    endforeach()
endfunction()

function(add_exec_target TARGET_NAME SOURCE HEADERS INCLUDE_DIRS LINK_LIBS DY_LIBS DEFS FLAGS FEATURES LINKER_FLAGS IS_TEST)
    if (NOT SOURCE)
        return()
    endif()

    if (IS_TEST)
        set(OUT_DIR "${CMAKE_SOURCE_DIR}/build/out/test")
    else()
        set(OUT_DIR "${CMAKE_SOURCE_DIR}/build/out/bin")
    endif()

    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set(OUT_DIR "${OUT_DIR}/Debug")
    else()
        set(OUT_DIR "${OUT_DIR}/Release")
    endif()

    add_executable("${TARGET_NAME}" ${SOURCE} ${HEADERS})
    target_include_directories("${TARGET_NAME}" PRIVATE ${INCLUDE_DIRS})
    target_link_libraries("${TARGET_NAME}" PRIVATE ${LINK_LIBS})
    target_compile_definitions("${TARGET_NAME}" PRIVATE ${DEFS})
    target_compile_options("${TARGET_NAME}" PRIVATE ${FLAGS})
    target_compile_features("${TARGET_NAME}" PRIVATE ${FEATURES})
    target_link_options("${TARGET_NAME}" PRIVATE ${LINKER_FLAGS})
    set_target_properties("${TARGET_NAME}" PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${OUT_DIR}")
    install_dy_libs("${TARGET_NAME}" "${OUT_DIR}" "${DY_LIBS}")
endfunction()

function(add_lib_target TARGET_NAME SOURCE HEADERS INCLUDE_DIRS LINK_LIBS DY_LIBS DEFS FLAGS FEATURES LINKER_FLAGS IS_SHARED)
    if (NOT SOURCE)
        return()
    endif()

    if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set(OUT_DIR "${CMAKE_SOURCE_DIR}/build/out/lib/Debug")
    else()
        set(OUT_DIR "${CMAKE_SOURCE_DIR}/build/out/lib/Release")
    endif()

    if (IS_SHARED)
        add_library("${TARGET_NAME}" SHARED ${SOURCE} ${HEADERS})
    else()
        add_library("${TARGET_NAME}" STATIC ${SOURCE} ${HEADERS})
    endif()
    
    target_include_directories("${TARGET_NAME}" PUBLIC ${INCLUDE_DIRS})
    target_link_libraries("${TARGET_NAME}" PUBLIC ${LINK_LIBS})
    target_compile_definitions("${TARGET_NAME}" PUBLIC ${DEFS})
    target_compile_options("${TARGET_NAME}" PUBLIC ${FLAGS})
    target_compile_features("${TARGET_NAME}" PUBLIC ${FEATURES})
    target_link_options("${TARGET_NAME}" PUBLIC ${LINKER_FLAGS})
    
    set_target_properties("${TARGET_NAME}" PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${OUT_DIR}"
        LIBRARY_OUTPUT_DIRECTORY "${OUT_DIR}"
        ARCHIVE_OUTPUT_DIRECTORY "${OUT_DIR}")

    install_dy_libs("${TARGET_NAME}" "${OUT_DIR}" "${DY_LIBS}")
endfunction()